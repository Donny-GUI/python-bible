built_in = {
    'abs':["Return the absolute value of a number. The argument may be an integer, a floating point number, or an object implementing __abs__(). If the argument is a complex number, its magnitude is returned.","⭐⭐","⭐⭐","⭐⭐"],
    'aiter':["Return an asynchronous iterator for an asynchronous iterable. Equivalent to calling x.__aiter__().","⭐⭐","⭐⭐","⭐⭐"],
    'all':["Return True if all elements of the iterable are true (or if the iterable is empty).","⭐⭐","⭐⭐","⭐⭐"],
    'any':["When awaited, return the next item from the given asynchronous iterator, or default if given and the iterator is exhausted.","⭐⭐","⭐⭐","⭐⭐"],
    'anext':["Return True if any element of the iterable is true. If the iterable is empty, return False.","⭐⭐","⭐⭐","⭐⭐"],
    'ascii':["As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \\x, \\u, or \\U escapes", "⭐⭐","⭐⭐","⭐⭐"],
    'bin':["Convert an integer number to a binary string prefixed with “0b”. The result is a valid Python expression. If x is not a Python int object, it has to define an __index__() method that returns an integer.","⭐⭐","⭐⭐","⭐⭐"],
    'bool':["Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise, it returns True. The bool class is a subclass of int (see Numeric Types — int, float, complex). It cannot be subclassed further. Its only instances are False and True","⭐⭐","⭐⭐","⭐⭐"],
    'breakpoint':["This function drops you into the debugger at the call site. Specifically, it calls sys.breakpointhook(), passing args and kws straight through. By default, sys.breakpointhook() calls pdb.set_trace() expecting no arguments. ","⭐⭐","⭐⭐","⭐⭐"],
    'bytearray':["Return a new array of bytes. The bytearray class is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Bytearray Operations.","⭐⭐","⭐⭐","⭐⭐"],
    'bytes':["Return a new “bytes” object which is an immutable sequence of integers in the range 0 <= x < 256. bytes is an immutable version of bytearray it has the same non-mutating methods and the same indexing and slicing behavior.","⭐⭐","⭐⭐","⭐⭐"],
    'callable':["Return True if the object argument appears callable, False if not. If this returns True, it is still possible that a call fails, but if it is False, calling object will never succeed.","⭐⭐","⭐⭐","⭐⭐"],
    'chr':["Return the string representing a character whose Unicode code point is the integer i. ","⭐⭐","⭐⭐","⭐⭐"],
    'classmethod':["Transform a method into a class method","⭐⭐","⭐⭐","⭐⭐"],
    'compile':["Compile the source into a code or AST object. Code objects can be executed by exec() or eval(). source can either be a normal string, a byte string, or an AST object. Refer to the ast module documentation for information on how to work with AST objects.","⭐⭐","⭐⭐","⭐⭐"],
    'complex':["Return a complex number with the value real + imag*1j or convert a string or number to a complex number. If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter. The second parameter can never be a string. Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float. If both arguments are omitted, returns 0j.","⭐⭐","⭐⭐","⭐⭐"],
    'delattr':["This is a relative of setattr(). The arguments are an object and a string. The string must be the name of one of the objects attributes. The function deletes the named attribute, provided the object allows i","⭐⭐","⭐⭐","⭐⭐"],
    'dict':["Create a new dictionary. The dict object is the dictionary class. See dict and Mapping Types — dict for documentation about this class.","⭐⭐","⭐⭐","⭐⭐"],
    'dir':["Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.","⭐⭐","⭐⭐","⭐⭐"],
    'divmod':["Take two (non-complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. ","⭐⭐","⭐⭐","⭐⭐"],
    'enumerate':["Return an enumerate object. iterable must be a sequence, an iterator, or some other object which supports iteration. The __next__() method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable.","⭐⭐","⭐⭐","⭐⭐"],
    'eval':["The arguments are a string and optional globals and locals. If provided, globals must be a dictionary. If provided, locals can be any mapping object.","⭐⭐","⭐⭐","⭐⭐"],
    'exec':["This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). 1 If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section File input in the Reference Manual). Be aware that the nonlocal, yield, and return statements may not be used outside of function definitions even within the context of code passed to the exec() function. The return value is None.","⭐⭐","⭐⭐","⭐⭐"],
    'filter':["Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.","⭐⭐","⭐⭐","⭐⭐"],
    'float':["Return a floating point number constructed from a number or string x.","⭐⭐","⭐⭐","⭐⭐"],
    'format':["Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec will depend on the type of the value argument; however, there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.The default format_spec is an empty string which usually gives the same effect as calling str(value).","⭐⭐","⭐⭐","⭐⭐"],
    'frozenset':["Return a new frozenset object, optionally with elements taken from iterable. frozenset is a built-in class. See frozenset and Set Types — set, frozenset for documentation about this class.","⭐⭐","⭐⭐","⭐⭐"],
    'getattr':["Return the value of the named attribute of object. name must be a string. If the string is the name of one of the objects attributes, the result is the value of that attribute.","⭐⭐","⭐⭐","⭐⭐"],
    'globals':["Return the dictionary implementing the current module namespace. For code within functions, this is set when the function is defined and remains the same regardless of where the function is called.","⭐⭐","⭐⭐","⭐⭐"],
    'hasattr':["    The arguments are an object and a string. The result is True if the string is the name of one of the objects attributes, False if not. (This is implemented by calling getattr(object, name) and seeing whether it raises an AttributeError or not.)","⭐⭐","⭐⭐","⭐⭐"],
    'hash':["Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).","⭐⭐","⭐⭐","⭐⭐"],
    'help':["Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.","⭐⭐","⭐⭐","⭐⭐"],
    'hex':["Convert an integer number to a lowercase hexadecimal string prefixed with “0x”. If x is not a Python int object, it has to define an __index__() method that returns an integer. ","⭐⭐","⭐⭐","⭐⭐"],
    'id':["Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.","⭐⭐","⭐⭐","⭐⭐"],
    'input':["If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError is raised.","⭐⭐","⭐⭐","⭐⭐"],
    'int':["Return an integer object constructed from a number or string x, or return 0 if no arguments are given. If x defines __int__(), int(x) returns x.__int__(). If x defines __index__(), it returns x.__index__(). If x defines __trunc__(), it returns x.__trunc__(). For floating point numbers, this truncates towards zero.","⭐⭐","⭐⭐","⭐⭐"],
    'isinstance':["Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect, or virtual) subclass thereof. If object is not an object of the given type, the function always returns False. If classinfo is a tuple of type objects (or recursively, other such tuples) or a Union Type of multiple types, return True if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised.","⭐⭐","⭐⭐","⭐⭐"],
    'issubclass':["Return True if class is a subclass (direct, indirect, or virtual) of classinfo. A class is considered a subclass of itself. classinfo may be a tuple of class objects (or recursively, other such tuples) or a Union Type, in which case return True if class is a subclass of any entry in classinfo. In any other case, a TypeError exception is raised.","⭐⭐","⭐⭐","⭐⭐"],
    'iter':["Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iterable protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0). If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel, is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its __next__() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.","⭐⭐","⭐⭐","⭐⭐"],
    'len':["Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).","⭐⭐","⭐⭐","⭐⭐"],
    'list':["Rather than being a function, list is actually a mutable sequence type, as documented in Lists and Sequence Types — list, tuple, range.","⭐⭐","⭐⭐","⭐⭐"],
    'locals':["Update and return a dictionary representing the current local symbol table. Free variables are returned by locals() when it is called in function blocks, but not in class blocks. Note that at the module level, locals() and globals() are the same dictionary.","⭐⭐","⭐⭐","⭐⭐"],
    'map':["Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().","⭐⭐","⭐⭐","⭐⭐"],
    'max':["Return the largest item in an iterable or the largest of two or more arguments.If one positional argument is provided, it should be an iterable. The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned.","⭐⭐","⭐⭐","⭐⭐"],
    'memoryview':["Return a “memory view” object created from the given argument. See Memory Views for more information.","⭐⭐","⭐⭐","⭐⭐"],
    'min':["Return the smallest item in an iterable or the smallest of two or more arguments.If one positional argument is provided, it should be an iterable. The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned.","⭐⭐","⭐⭐","⭐⭐"],
    'next':["Retrieve the next item from the iterator by calling its __next__() method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised.","⭐⭐","⭐⭐","⭐⭐"],
    'object':["Return a new featureless object. object is a base for all classes. It has methods that are common to all instances of Python classes. This function does not accept any arguments.","⭐⭐","⭐⭐","⭐⭐"],
    'oct':["Convert an integer number to an octal string prefixed with “0o”. The result is a valid Python expression. If x is not a Python int object, it has to define an __index__() method that returns an integer. ","⭐⭐","⭐⭐","⭐⭐"],
    'open':["Open file and return a corresponding file object. If the file cannot be opened, an OSError is raised. See Reading and Writing Files for more examples of how to use this function.","⭐⭐","⭐⭐","⭐⭐"],
    'ord':["    Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('€') (Euro sign) returns 8364. This is the inverse of chr().","⭐⭐","⭐⭐","⭐⭐"],
    'pow':["Return base to the power exp; if mod is present, return base to the power exp, modulo mod (computed more efficiently than pow(base, exp) % mod). The two-argument form pow(base, exp) is equivalent to using the power operator: base**exp.","⭐⭐","⭐⭐","⭐⭐"],
    'print':["Print objects to the text stream file, separated by sep and followed by end. sep, end, file, and flush, if present, must be given as keyword arguments.","⭐⭐","⭐⭐","⭐⭐"],
    'property':["Return a property attribute.fget is a function for getting an attribute value. fset is a function for setting an attribute value. fdel is a function for deleting an attribute value. And doc creates a docstring for the attribute.","⭐⭐","⭐⭐","⭐⭐"],
    'range':["Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types — list, tuple, range.","⭐⭐","⭐⭐","⭐⭐"],
    'repr':["Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(); otherwise, the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__() method. If sys.displayhook() is not accessible, this function will raise RuntimeError.","⭐⭐","⭐⭐","⭐⭐"],
    'reversed':["Return a reverse iterator. seq must be an object which has a __reversed__() method or supports the sequence protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0).","⭐⭐","⭐⭐","⭐⭐"],
    'round':["Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.","⭐⭐","⭐⭐","⭐⭐"],
    'set':["Return a new set object, optionally with elements taken from iterable. set is a built-in class. See set and Set Types — set, frozenset for documentation about this class.","⭐⭐","⭐⭐","⭐⭐"],
    'setattr':["This is the counterpart of getattr(). The arguments are an object, a string, and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.","⭐⭐","⭐⭐","⭐⭐"],
    'slice':["Return a slice object representing the set of indices specified by range(start, stop, step). The start and step arguments default to None. Slice objects have read-only data attributes start, stop, and step which merely return the argument values (or their default). They have no other explicit functionality; however, they are used by NumPy and other third-party packages. Slice objects are also generated when extended indexing syntax is used. For example: a[start:stop:step] or a[start:stop, i]. See itertools.islice() for an alternate version that returns an iterator.","⭐⭐","⭐⭐","⭐⭐"],
    'sorted':["Return a new sorted list from the items in iterable.Has two optional arguments which must be specified as keyword arguments.key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower). The default value is None (compare the elements directly).reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed.","⭐⭐","⭐⭐","⭐⭐"],
    'staticmethod':["A static method does not receive an implicit first argument.","⭐⭐","⭐⭐","⭐⭐"],
    'str':["Return a str version of object. See str() for details.str is the built-in string class. For general information about strings, see Text Sequence Type — str.","⭐⭐","⭐⭐","⭐⭐"],
    'sum':["Sums start and the items of an iterable from left to right and returns the total. The iterables items are normally numbers, and the start value is not allowed to be a string.","⭐⭐","⭐⭐","⭐⭐"],
    'super':["Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class.","⭐⭐","⭐⭐","⭐⭐"],
    'tuple':["Rather than being a function, tuple is actually an immutable sequence type, as documented in Tuples and Sequence Types — list, tuple, range.","⭐⭐","⭐⭐","⭐⭐"],
    'type':["With one argument, return the type of an object. The return value is a type object and generally the same object as returned by object.__class__.","⭐⭐","⭐⭐","⭐⭐"],
    'vars':["Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write restrictions on their __dict__ attributes (for example, classes use a types.MappingProxyType to prevent direct dictionary updates).Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored.","⭐⭐","⭐⭐","⭐⭐"],
    'zip':["Iterate over several iterables in parallel, producing tuples with an item from each one.","⭐⭐","⭐⭐","⭐⭐"],
    '__import__':["This function is invoked by the import statement. It can be replaced (by importing the builtins module and assigning to builtins.__import__) in order to change semantics of the import statement, but doing so is strongly discouraged as it is usually simpler to use import hooks (see PEP 302) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use. Direct use of __import__() is also discouraged in favor of importlib.import_module().","⭐⭐","⭐⭐","⭐⭐"],
}